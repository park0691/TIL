import{_ as n,c as s,o as a,b as e}from"./app-D8hxUNFf.js";const t="/TIL/images/java/20241003-thread-callable-future-executor-1.png",p={},c=e(`<h1 id="callable-future-executor" tabindex="-1"><a class="header-anchor" href="#callable-future-executor"><span>Callable, Future, Executor</span></a></h1><h2 id="thread와-runnable의-한계" tabindex="-1"><a class="header-anchor" href="#thread와-runnable의-한계"><span>Thread와 Runnable의 한계</span></a></h2><ul><li>저수준의 API에 의존</li><li>값의 반환 불가능</li><li>매번 스레드 생성, 종료의 오버헤드</li></ul><h2 id="callable" tabindex="-1"><a class="header-anchor" href="#callable"><span>Callable</span></a></h2><p>기존 Runnable 인터페이스는 결과를 반환할 수 없었다. Runnable의 발전된 형태로써 Java 5부터 제네릭으로 결과를 받을 수 있는 Callable이 추가되었다.</p><p>반환 값과 Exception을 허용할 수 있는 것이 특징이다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@FunctionalInterface</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">V</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="future" tabindex="-1"><a class="header-anchor" href="#future"><span>Future</span></a></h2><p>미래에 반환될 결과를 나타내는 인터페이스. Java 5에서 비동기 작업을 위해 도입되었다.</p><p>가용 스레드가 없어서 실행이 미뤄지거나 작업 시간이 오래 걸리기 때문에 실행 결과를 바로 받지 못하고 미래에 얻게 될 수 있다. 미래 시점에 완료될 Callable의 반환 값을 비동기로 구하기 위해 사용되는 것이 Future 인터페이스다.</p><p>이를 위해 비동기 작업의 현재 상태를 확인하고 기다리며, 결과를 얻는 방법 등을 제공한다.</p><p>저수준의 스레드에 비해 직관적으로 이해하기 쉬운 장점이 있다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">boolean</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> mayInterruptIfRunning<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">boolean</span> <span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">boolean</span> <span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">,</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="주요-메소드" tabindex="-1"><a class="header-anchor" href="#주요-메소드"><span>주요 메소드</span></a></h3><ol><li><p>get() / get(long timeout, TimeUnit unit)</p><ul><li>블로킹 방식으로 결과값을 받아온다. 결과가 반환되기 전까지 호출한 스레드는 <code>block</code>된다.</li><li>timeout 시간을 지정할 수 있는데, 그 시간동안 반환되지 않으면 <code>TimeoutException</code> 발생한다.</li><li><code>InterruptedException, ExecutionException</code> 등 체크된 예외를 던지기 때문에 적절한 예외 처리를 해야 한다.</li></ul></li><li><p>cancel(boolean mayInterruptIfRunning)<br></p><ul><li>작업을 중단한다.</li><li><code>mayInterruptIfRunning</code> 변수는 작업이 실행 중일 때 그 작업을 중단시킬지 여부를 결정한다. <code>true</code>로 설정된 경우 실행 중인 작업이 있다면 그 작업을 중단시킨다.</li><li>성공적으로 작업이 취소되면 <code>true</code>를 반환하며, 작업이 이미 완료됬거나, 취소됬거나, 취소할 수 없는 경우 <code>false</code>를 반환한다.</li></ul></li><li><p>isDone()<br> 작업의 완료 여부 반환</p></li><li><p>isCancelled()<br> 작업의 취소 여부 반환</p></li></ol><h3 id="예제-코드" tabindex="-1"><a class="header-anchor" href="#예제-코드"><span>예제 코드</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataReader</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Reading data...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;Data reading finished&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Processing data...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;Data is processed&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="future-task-수행하기" tabindex="-1"><a class="header-anchor" href="#future-task-수행하기"><span>Future Task 수행하기</span></a></h4><p>수행할 작업을 <code>Callable</code> 구현 객체로 감싼 다음 <code>ExecutorService</code>에 <code>submit</code>한다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> dataReadFuture <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DataReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> dataProcessFuture <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DataProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>dataReadFuture<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>dataProcessFuture<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Reading and processing not yet finished.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataReadFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataProcessFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">Reading and processing not yet finished.</span>
<span class="line">Reading data...</span>
<span class="line">Processing data...</span>
<span class="line">Reading and processing not yet finished.</span>
<span class="line">Reading and processing not yet finished.</span>
<span class="line">Reading and processing not yet finished.</span>
<span class="line">Reading and processing not yet finished.</span>
<span class="line">Data reading finished</span>
<span class="line">Data is processed</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5초만에 프로그램이 종료되는 것을 확인할 수 있다.</p><p><code>isDone()</code> 메서드로 Task가 끝나지 않았다면 1초를 기다린다.</p><p>두 Task가 모두 끝나면 <code>get()</code> 메서드로 반환값을 얻어온다.</p><h4 id="isdone-를-뺀다면" tabindex="-1"><a class="header-anchor" href="#isdone-를-뺀다면"><span><code>isDone()</code>를 뺀다면</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> dataReadFuture <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DataReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> dataProcessFuture <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DataProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataReadFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataProcessFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이 코드 또한 5초만에 프로그램이 종료된다.</p><p>다른 점은 5초 중 4초는 <code>blocking</code>된다는 것이다. <code>get()</code> 호출하는동안 이 프로그램은 블로킹되어 있다.</p><h4 id="timeout" tabindex="-1"><a class="header-anchor" href="#timeout"><span>Timeout</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> dataReadFuture <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DataReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> dataProcessFuture <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DataProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataReadFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataProcessFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> <span class="token operator">|</span> <span class="token class-name">TimeoutException</span> <span class="token operator">|</span> <span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">Reading data...</span>
<span class="line">Processing data...</span>
<span class="line">java.util.concurrent.TimeoutException</span>
<span class="line">	at java.base/java.util.concurrent.FutureTask.get(FutureTask.java:204)</span>
<span class="line">	at study.thread.FutureTest.main(FutureTest.java:14)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5초의 시간이 필요한 작업을 3초의 제한을 두어 <code>TimeoutException</code>이 발생한다.</p><h4 id="cancel" tabindex="-1"><a class="header-anchor" href="#cancel"><span>Cancel</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> dataReadFuture <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DataReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> dataReadResult <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">boolean</span> cancelled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>dataReadFuture<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        dataReadResult <span class="token operator">=</span> dataReadFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> <span class="token operator">|</span> <span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    cancelled <span class="token operator">=</span> dataReadFuture<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cancelled<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataReadResult<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Task was cancelled.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-console line-numbers-mode" data-highlighter="prismjs" data-ext="console" data-title="console"><pre><code><span class="line">Task was cancelled.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>5초가 지나기 전에 <code>isDone()</code>으로 반환 여부를 확인하므로 해당 Task가 끝나지 않는다.</p><p>취소된 작업을 <code>get()</code>하면 <code>CancellationException</code> 발생한다.</p><h3 id="한계점" tabindex="-1"><a class="header-anchor" href="#한계점"><span>한계점</span></a></h3><ul><li>명시적으로 셋팅할 수 없다. 즉, 그 값과 상태를 직접 셋팅할 수 없다.</li><li>병렬로 수행하고 병합하는 매커니즘이 없다.</li></ul><h2 id="executor" tabindex="-1"><a class="header-anchor" href="#executor"><span>Executor</span></a></h2><p><img src="`+t+`" alt="executor"><em>출처 : https://geekrai.blogspot.com/2013/07/executor-framework-in-java.html</em></p><p>Executor는 인터페이스 분리 원칙(ISP)에 맞게 등록된 작업을 실행하는 책임만 갖는 인터페이스다. 따라서 전달받은 작업을 실행하는 <code>execute()</code> 메소드만 가진다.</p><ul><li>Concurrent API의 최상위 인터페이스</li><li>등록된 작업(<code>Runnable</code>)을 실행하기 위한 인터페이스</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Executor</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="executorservice" tabindex="-1"><a class="header-anchor" href="#executorservice"><span>ExecutorService</span></a></h2><p>작업의 등록을 책임지는 인터페이스</p><p><code>Executor</code> 인터페이스를 상속받기 때문에 작업 등록뿐만 아니라 실행을 위한 책임도 가진다. 또한 작업의 생명주기를 관리하는 기능을 제공하며, <code>Runnable</code> 뿐만 아니라 <code>Callable</code> 스레드를 실행하는 <code>submit</code> 메서드도 제공한다.</p><p>스레드 풀은 기본적으로 <code>ExecutorService</code> 인터페이스를 구현한다. 대표적으로 <code>ThreadPoolExecutor</code>가 <code>ExecutorService</code>의 구현체인데, <code>ThreadPoolExecutor</code> 내부의 Blocking Queue에 작업을 등록한다. 그리고 각 작업들을 스레드 풀의 사용 가능한 스레드에 할당하여 작업을 수행한다. 만약 사용 가능한 스레드가 없다면 작업은 큐에서 대기하게 되고, 스레드가 작업이 끝나면 큐에 있는 다음 작업을 할당받는다.</p><h3 id="라이프사이클-관리-메소드" tabindex="-1"><a class="header-anchor" href="#라이프사이클-관리-메소드"><span>라이프사이클 관리 메소드</span></a></h3><table><thead><tr><th>메소드</th><th>설명</th></tr></thead><tbody><tr><td>void shutdown()</td><td>- 새로운 작업들을 더 이상 받아들이지 않음 <br>- 호출 전에 제출된 작업들은 그대로 실행이 끝나고 종료됨(Graceful Shutdown)</td></tr><tr><td>List&lt;Runnable&gt; shutdownNow()</td><td>- shutdown 기능에 더해 이미 제출된 작업들을 인터럽트시킴(Abrupt Shutdown)<br>- 실행을 위해 대기중인 작업 목록(List&lt;Runnable&gt;)을 반환</td></tr><tr><td>boolean isShutdown()</td><td>- Executor의 shutdown 여부를 반환</td></tr><tr><td>boolean isTerminated()</td><td>- shutdown 실행 후 모든 작업의 종료 여부를 반환</td></tr><tr><td>boolean awaitTermination(long timeout, TimeUnit unit)</td><td>- shutdown 실행 후, 지정한 시간 동안 모든 작업이 종료될 때 까지 대기함<br>- 지정한 시간 내에 모든 작업이 종료되었는지 여부를 반환</td></tr></tbody></table><h3 id="비동기-작업-메소드" tabindex="-1"><a class="header-anchor" href="#비동기-작업-메소드"><span>비동기 작업 메소드</span></a></h3><p>Runnable, Callable 작업을 위한 메소드를 제공한다.</p><table><thead><tr><th>메소드</th><th>설명</th></tr></thead><tbody><tr><td>submit</td><td>- 실행할 작업들을 요청(Runnable, Callable 처리), 작업의 결과를 반환<br>- 실행 즉시 Future 객체를 반환한다.<br>- 처리 중 예외 발생하면 스레드를 제거하지 않고 다음 작업에 재사용한다.</td></tr><tr><td>execute</td><td>- 실행할 작업들을 요청(Runnable만 처리), 작업의 결과를 반환하지 않는다.<br>- 처리 중 예외 발생하면 스레드 풀에서 해당 예외를 제거하고 새로운 스레드를 생성한다.</td></tr><tr><td>invokeAll</td><td>- 모든 결과가 나올 때 까지 대기하는 블로킹 방식의 요청<br>- 동시에 주어진 작업들을 모두 실행하고, 전부 끝나면 각각의 상태와 결과를 갖는 List&lt;Future&gt;을 반환</td></tr><tr><td>invokeAny</td><td>- 가장 빨리 실행된 결과가 나올 때 까지 대기하는 블로킹 방식의 요청<br>- 동시에 주어진 작업들을 모두 실행하고, 가장 빨리 완료된 하나의 결과를 Future로 반환</td></tr></tbody></table><h2 id="executors" tabindex="-1"><a class="header-anchor" href="#executors"><span>Executors</span></a></h2><p><code>Executor</code>, <code>ExecutorService</code>를 쉽게 사용할 수 있도록 돕는 유틸리티 클래스 스레드 풀을 생성하는 팩토리 메서드를 제공한다.</p><table><thead><tr><th>메소드</th><th>설명</th></tr></thead><tbody><tr><td>newSingleThreadExecutor</td><td>- 오직 하나의 스레드로 처리하며 나머지 스레드 생성 요청은 현재 스레드가 종료될때까지 대기한다. <br>- 현재 메인 클래스에서 오직 하나의 스레드로 작업을 수행할 때 안전하게 사용할 수 있으나, 여러개의 스레드를 생성할 수 없다.</td></tr><tr><td>newFixedThreadPool</td><td>- 고정된 스레드 수를 갖는 스레드 풀을 생성한다. 스레드 풀 크기 내에서 스레드가 생성되어 병렬 처리된다.<br>- 스레드 풀의 크기를 넘으면 풀에 여유가 생길때까지 큐에 대기한다.</td></tr><tr><td>newCachedThreadPool</td><td>- 사용 가능한 스레드가 없다면 스레드를 새로 생성해서 작업을 처리하고, 있다면 기존 스레드를 재사용한다.<br>- 멀티 스레드 기반으로 동작한다는 점에서 newFixedThreadPool과 동일하지만, 등록한 스레드를 모두 한 번에 실행시키며 동시 처리에 대한 개수 제한이 없다.<br>- 일정 시간 스레드가 사용되지 않으면 회수한다.</td></tr><tr><td>newWorkStealingPool</td><td>- Work Steal 알고리즘을 사용하는 ForkJoinPool을 생성한다.<br>- 스레드 풀을 생성하며, 실행되는 하드웨어의 사용 가능한 모든 프로세스(CPU)의 코어를 쓰도록 병럴 처리 레벨을 설정한다.<br>- 해당 하드웨어의 자원을 모두 선점하려고 하기 때문에 다른 프로세스 혹은 애플리케이션 성능에 영향을 끼친다.</td></tr><tr><td>unconfigurableExecutorService</td><td>- 메서드의 입력 파라미터로 반드시 ExecutorService 객체를 전달해야한다. 그리고 해당 객체를 표준 ExecutorService 객체로 위임해서 결과를 리턴한다.<br>- ExecutorService를 구현한 여러 클래스의 기능 중 ExecutorService의 메서드만 호출하고 나머지 기능을 사용하지 못하도록 제한할 필요가 있을때 사용한다.</td></tr></tbody></table><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>References</span></a></h2><ul><li>https://javabom.tistory.com/96</li><li>https://hudi.blog/java-thread-pool/</li><li>https://devfunny.tistory.com/807</li><li>https://geekrai.blogspot.com/2013/07/executor-framework-in-java.html</li></ul>`,59),l=[c];function o(i,u){return a(),s("div",null,l)}const d=n(p,[["render",o],["__file","thread-callable-future-executor.html.vue"]]),k=JSON.parse('{"path":"/java/thread-callable-future-executor.html","title":"Callable, Future, Executor","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Thread와 Runnable의 한계","slug":"thread와-runnable의-한계","link":"#thread와-runnable의-한계","children":[]},{"level":2,"title":"Callable","slug":"callable","link":"#callable","children":[]},{"level":2,"title":"Future","slug":"future","link":"#future","children":[{"level":3,"title":"주요 메소드","slug":"주요-메소드","link":"#주요-메소드","children":[]},{"level":3,"title":"예제 코드","slug":"예제-코드","link":"#예제-코드","children":[]},{"level":3,"title":"한계점","slug":"한계점","link":"#한계점","children":[]}]},{"level":2,"title":"Executor","slug":"executor","link":"#executor","children":[]},{"level":2,"title":"ExecutorService","slug":"executorservice","link":"#executorservice","children":[{"level":3,"title":"라이프사이클 관리 메소드","slug":"라이프사이클-관리-메소드","link":"#라이프사이클-관리-메소드","children":[]},{"level":3,"title":"비동기 작업 메소드","slug":"비동기-작업-메소드","link":"#비동기-작업-메소드","children":[]}]},{"level":2,"title":"Executors","slug":"executors","link":"#executors","children":[]},{"level":2,"title":"References","slug":"references","link":"#references","children":[]}],"git":{"updatedTime":1728045263000,"contributors":[{"name":"depark","email":"mem29238@gmail.com","commits":2}]},"filePathRelative":"java/thread-callable-future-executor.md"}');export{d as comp,k as data};
