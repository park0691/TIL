import{_ as n,c as s,o as a,b as t}from"./app-C_PO5bhn.js";const e={},p=t(`<h1 id="함수형-인터페이스와-람다" tabindex="-1"><a class="header-anchor" href="#함수형-인터페이스와-람다"><span>함수형 인터페이스와 람다</span></a></h1><h2 id="functional-interface-함수형-인터페이스" tabindex="-1"><a class="header-anchor" href="#functional-interface-함수형-인터페이스"><span>Functional Interface, 함수형 인터페이스</span></a></h2><ul><li>추상 메소드를 하나만 가지는 인터페이스</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@FunctionalInterface</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RunSomething</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 추상 메소드 딱 하나만 가지고 있는 인터페이스</span></span>
<span class="line">    <span class="token keyword">int</span> <span class="token function">doIt</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">printAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;40&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>@FunctionalInterface</code> 어노테이션을 사용하면 추상 메서드를 하나만 가지지 않는 경우 컴파일 오류를 발생시키다.</li><li>static, default 메소드는 있어도 상관 없다.</li></ul><h3 id="사용" tabindex="-1"><a class="header-anchor" href="#사용"><span>사용</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">RunSomething</span> runSomething <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> i<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>runSomething<span class="token punctuation">.</span><span class="token function">doIt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// static method</span></span>
<span class="line"><span class="token class-name">RunSomething</span><span class="token punctuation">.</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// default method</span></span>
<span class="line">runSomething<span class="token punctuation">.</span><span class="token function">printAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="왜-필요한가" tabindex="-1"><a class="header-anchor" href="#왜-필요한가"><span>왜 필요한가</span></a></h3><h4 id="동작-파라미터화" tabindex="-1"><a class="header-anchor" href="#동작-파라미터화"><span>동작 파라미터화</span></a></h4><p>함수형 인터페이스를 메서드의 매개변수로 사용하면 특정 동작을 인수로 전달할 수 있다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">&gt;</span></span> <span class="token function">filterApples</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">&gt;</span></span> apples<span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Apple</span> apple <span class="token operator">:</span> apples<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>apple<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>apple<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>filterApples 메서드는 함수형 인터페이스 p를 받아서 함수형 인터페이스의 test 메서드 (T -&gt; boolean)을 수행한다.</p><p>다음은 filterApples 메서드를 사용하는 코드이다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">&gt;</span></span> heavyApples <span class="token operator">=</span> <span class="token function">filterApples</span><span class="token punctuation">(</span>apples<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Apple</span> apple<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> apple<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">300</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>다음과 같이 함수형 인터페이스를 통해 수행할 동작을 익명 클래스로 구현하여 파라미터로 념겨줄 수 있다. 그런데 메서드 하나를 구현하는데도 코드가 장황하다. 한 눈에 안읽힌다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">&gt;</span></span> redApples <span class="token operator">=</span> <span class="token function">filterApples</span><span class="token punctuation">(</span>apples<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Apple</span> apple<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token constant">RED</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>apple<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">&gt;</span></span> heavyApples <span class="token operator">=</span> <span class="token function">filterApples</span><span class="token punctuation">(</span>apples<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Apple</span> apple<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> apple<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>다음과 같이 람다식과 결합하면 코드의 간결성, 가독성을 높일 수 있다.</p><p><strong>[장점]</strong></p><ul><li>변경에 닫혀있고 확장에 유연한 코드를 만들 수 있다. (OCP) <ul><li><code>filterApples()</code> 메서드의 내부 구현을 바꾸지 않고 필터 조건을 바꿀 수 있어 확장에 유연하다.</li></ul></li><li>하나의 메서드가 다른 동작을 수행할 수 있도록 재활용할 수 있다. <ul><li>하나의 메서드로 색깔을 필터링, 무게로 필터링하는 동작을 다 수행할 수 있다.</li></ul></li></ul><h2 id="lambda-expression-람다식" tabindex="-1"><a class="header-anchor" href="#lambda-expression-람다식"><span>Lambda Expression, 람다식</span></a></h2><p>익명 함수를 표현하는 간결한 문법이다. 람다식은 함수를 일급 객체(first class object)로 취급하여 다른 함수의 인자로 전달하거나 함수에서 반환값으로 사용할 수 있다.</p><h3 id="특징" tabindex="-1"><a class="header-anchor" href="#특징"><span>특징</span></a></h3><ul><li>메서드처럼 특정 클래스에 종속되지 않으므로 함수라고 부른다.</li><li>람다 표현식을 메서드 인수로 전달하거나 변수로 저장할 수 있다.</li><li>익명 클래스처럼 많은 자질구레한 코드를 구현할 필요 없다.</li></ul><h2 id="java-util-function" tabindex="-1"><a class="header-anchor" href="#java-util-function"><span>java.util.function</span></a></h2><ul><li>자바에서 기본으로 제공하는 함수형 인터페이스 패키지</li></ul><table><thead><tr><th>함수형 인터페이스</th><th>메서드 형태</th><th>API 활용</th></tr></thead><tbody><tr><td>java.lang.Runnable</td><td>void run()</td><td>스레드의 매개 변수로 이용</td></tr><tr><td>Consumer&lt;T&gt;</td><td>void accept(T t)</td><td>객체 T를 소비</td></tr><tr><td>Supplier&lt;T&gt;</td><td>T get()</td><td>객체 T를 반환</td></tr><tr><td>Function&lt;T,R&gt;</td><td>R apply(T t)</td><td>객체 T를 받아 R을 반환</td></tr><tr><td>Predicate&lt;T&gt;</td><td>boolean test(T t)</td><td>객체 T를 받아 boolean을 반환</td></tr><tr><td>Operator</td><td>T applyAs(T t)</td><td>매개 타입, 반환 타입이 동일</td></tr></tbody></table><h3 id="매개변수가-두-개인-인터페이스" tabindex="-1"><a class="header-anchor" href="#매개변수가-두-개인-인터페이스"><span>매개변수가 두 개인 인터페이스</span></a></h3><table><thead><tr><th>함수형 인터페이스</th><th>메서드 형태</th><th>설명</th></tr></thead><tbody><tr><td>BiConsumer&lt;T,U&gt;</td><td>void accept(T t, U u)</td><td>두 개의 매개변수만 있고, 반환 값이 없음</td></tr><tr><td>BiPredicate&lt;T,U&gt;</td><td>boolean test(T t, U u)</td><td>매개변수는 둘, 반환값은 boolean</td></tr><tr><td>BiFunction&lt;T,U,R&gt;</td><td>R apply(T t, U u)</td><td>두 매개변수를 받아 하나의 결과를 반환</td></tr></tbody></table><ul><li>두 개 이상의 매개변수를 갖는 함수형 인터페이스가 필요하다면 직접 만들어서 써야 한다. 만일 3개 매개변수를 갖는 함수형 인터페이스를 선언한다면 다음과 같을 것이다.</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@FunctionalInterface</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">TriFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token class-name">R</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">,</span> <span class="token class-name">U</span> u<span class="token punctuation">,</span> <span class="token class-name">V</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="unaryoperator와-binaryoperator" tabindex="-1"><a class="header-anchor" href="#unaryoperator와-binaryoperator"><span>UnaryOperator와 BinaryOperator</span></a></h3><p>Function의 또 다른 변형으로 UnaryOperator와 BinaryOperator가 있다. 매개변수의 타입과 반환 타입이 모두 일치한다는 점이 Function과 다르다.</p><table><thead><tr><th>함수형 인터페이스</th><th>메서드 형태</th><th>설명</th></tr></thead><tbody><tr><td>UnaryOperator&lt;T&gt;</td><td>T apply(T t)</td><td>Function&lt;T,R&gt;의 하위 인터페이스</td></tr><tr><td>BinaryOperator&lt;T&gt;</td><td>T apply(T t, T t)</td><td>BiFunction&lt;T,U,R&gt;의 하위 인터페이스</td></tr></tbody></table><h3 id="컬렉션-프레임워크와-함수형-인터페이스" tabindex="-1"><a class="header-anchor" href="#컬렉션-프레임워크와-함수형-인터페이스"><span>컬렉션 프레임워크와 함수형 인터페이스</span></a></h3><p>컬렉션 프레임워크의 인터페이스에 추가된 다수의 디폴트 메서드 중 일부는 함수형 인터페이스다.</p><table><thead><tr><th>인터페이스</th><th>메서드</th><th>설명</th></tr></thead><tbody><tr><td>Collection</td><td>boolean removeIf(Predicate&lt;E&gt; filter)</td><td>조건에 맞는 요소를 삭제</td></tr><tr><td>List</td><td>void replaceAll(UnaryOperator&lt;E&gt; operator)</td><td>모든 요소를 변환하여 대체</td></tr><tr><td>Iterable</td><td>void forEach(Consumer&lt;T&gt; action)</td><td>모든 요소에 작업 action을 수행</td></tr><tr><td>Map</td><td>V compute(K key, BiFunction&lt;K,V,V&gt; f)</td><td>지정된 키의 값에 작업 f를 수행</td></tr><tr><td></td><td>V computeIfAbsent(K key, Function&lt;K,V&gt; f)</td><td>키가 없으면 작업 f 수행 후 추가</td></tr><tr><td></td><td>V computeIfPresent(K key, BiFunction&lt;K,V,V&gt; f)</td><td>지정된 키가 있을 때 작업 f를 수행</td></tr><tr><td></td><td>V merge(K key, V value, BiFunction&lt;V,V,V&gt; f)</td><td>모든 요소에 병합작업 f를 수행</td></tr><tr><td></td><td>void forEach(BiConsumer&lt;K,V&gt; action)</td><td>모든 요소에 작업 action을 수행</td></tr><tr><td></td><td>void replaceAll(BiFunction&lt;K,V,V&gt; f)</td><td>모든 요소에 치환작업 f를 수행</td></tr></tbody></table><ul><li>Map 인터페이스 &#39;compute&#39;로 시작하는 메서드는 맵의 value를 변환하고</li><li>merge()는 Map을 병합한다.</li></ul><h3 id="기본형을-사용하는-인터페이스" tabindex="-1"><a class="header-anchor" href="#기본형을-사용하는-인터페이스"><span>기본형을 사용하는 인터페이스</span></a></h3><p>지금까지 기술한 인터페이스는 매개변수와 반환 타입이 Generic이므로 기본 타입이 전달되면 Boxing이 일어난다. 따라서 기본형 타입을 처리할 때 Wrapper 클래스를 사용하는 것은 비효율적이다. 보다 효율적으로 처리할 수 있도록 기본형을 사용하는 함수형 인터페이스가 제공된다.</p><ul><li>Consumer</li></ul><table><thead><tr><th>함수형 인터페이스</th><th>메서드</th><th>설명</th></tr></thead><tbody><tr><td>IntConsumer</td><td>void accept(int value)</td><td>int 값을 받아 소비</td></tr><tr><td>LongConsumer</td><td>void accept(long value)</td><td>long 값을 받아 소비</td></tr><tr><td>DoubleConsumer</td><td>void accept(double value)</td><td>double 값을 받아 소비</td></tr><tr><td>ObjIntConsumer&lt;T&gt;</td><td>void accept(T t, int value)</td><td>객체 T와 int 값을 받아 소비</td></tr><tr><td>ObjDoubleConsumer&lt;T&gt;</td><td>void accept(T t, double value)</td><td>객체 T와 double 값을 받아 소비</td></tr><tr><td>ObjLongConsumer&lt;T&gt;</td><td>void accept(T t, long value)</td><td>객체 T와 long 값을 받아 소비</td></tr></tbody></table><ul><li>Supplier</li></ul><table><thead><tr><th>함수형 인터페이스</th><th>메서드</th><th>설명</th></tr></thead><tbody><tr><td>BooleanSupplier</td><td>boolean getAsBoolean()</td><td>boolean 값을 리턴</td></tr><tr><td>DoubleSupplier</td><td>double getAsDouble()</td><td>double 값을 리턴</td></tr><tr><td>IntSupplier</td><td>int getAsInt()</td><td>int 값을 리턴</td></tr><tr><td>LongSupplier</td><td>long getAsLong()</td><td>long 값을 리턴</td></tr></tbody></table><ul><li>Function</li></ul><table><thead><tr><th>함수형 인터페이스</th><th>메서드</th><th>설명</th></tr></thead><tbody><tr><td>DoubleFunction&lt;R&gt;</td><td>R apply(double value)</td><td>double을 객체 R로 매핑</td></tr><tr><td>IntFunction&lt;R&gt;</td><td>R apply(int value)</td><td>int를 객체 R로 매핑</td></tr><tr><td>IntToDoubleFunction</td><td>double applyAsDouble(int value)</td><td>int를 double로 매핑</td></tr><tr><td>IntToLongFunction</td><td>long applyAsLong(int value)</td><td>int를 long으로 매핑</td></tr><tr><td>LongToDoubleFunction</td><td>double applyAsDouble(long value)</td><td>long을 double로 매핑</td></tr><tr><td>LongToIntFunction</td><td>int applyAsInt(long value)</td><td>long을 int로 매핑</td></tr><tr><td>ToDoubleBiFunction&lt;T,U&gt;</td><td>double applyAsDouble(T t, U u)</td><td>객체 T, U를 double로 매핑</td></tr><tr><td>ToDoubleFunction&lt;T&gt;</td><td>double applyAsDouble(T t)</td><td>객체 T를 double로 매핑</td></tr><tr><td>ToIntBiFunction&lt;T,U&gt;</td><td>int applyAsInt(T t, U u)</td><td>객체 T, U를 int로 매핑</td></tr><tr><td>ToIntFunction&lt;T&gt;</td><td>int applyAsInt(T t)</td><td>객체 T를 int로 매핑</td></tr><tr><td>ToLongBiFunction&lt;T,U&gt;</td><td>long applyAsLong(T t, U u)</td><td>객체 T, U를 long으로 매핑</td></tr><tr><td>ToLongFunction&lt;T&gt;</td><td>long applyAsLong(T t)</td><td>객체 T를 long으로 매핑</td></tr></tbody></table><ul><li>Operator</li></ul><table><thead><tr><th>함수형 인터페이스</th><th>메서드</th><th>설명</th></tr></thead><tbody><tr><td>DoubleBinaryOperator</td><td>double applyAsDouble(double, double)</td><td>두 개의 double을 연산</td></tr><tr><td>DoubleUnaryOperator</td><td>double applyAsDouble(double)</td><td>한 개의 double을 연산</td></tr><tr><td>IntBinaryOperator</td><td>int applyAsInt(int, int)</td><td>두 개의 int를 연산</td></tr><tr><td>IntUnaryOperator</td><td>int applyAsInt(int)</td><td>한 개의 int를 연산</td></tr><tr><td>LongBinaryOperator</td><td>long applyAsLong(long, long)</td><td>두 개의 long을 연산</td></tr><tr><td>LongUnaryOperator</td><td>long applyAsLong(long)</td><td>한 개의 long을 연산</td></tr></tbody></table><ul><li>Predicate</li></ul><table><thead><tr><th>함수형 인터페이스</th><th>메서드</th><th>설명</th></tr></thead><tbody><tr><td>DoublePredicate</td><td>boolean test(double)</td><td>double 값을 조사</td></tr><tr><td>IntPredicate</td><td>boolean test(int)</td><td>int 값을 조사</td></tr><tr><td>LongPredicate</td><td>boolean test(long)</td><td>long 값을 조사</td></tr></tbody></table><h2 id="function의-합성과-predicate의-결합" tabindex="-1"><a class="header-anchor" href="#function의-합성과-predicate의-결합"><span>Function의 합성과 Predicate의 결합</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// Function</span></span>
<span class="line"><span class="token keyword">default</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">andThen</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> after<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">default</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> before<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Predicate</span></span>
<span class="line"><span class="token keyword">default</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">and</span><span class="token punctuation">(</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">default</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">or</span><span class="token punctuation">(</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> other<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">default</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">isEqual</span><span class="token punctuation">(</span><span class="token class-name">Object</span> targetRef<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="function의-합성" tabindex="-1"><a class="header-anchor" href="#function의-합성"><span>Function의 합성</span></a></h3><p>두 람다식을 합성해서 새로운 람다식을 만들 수 있다.</p><ol><li><code>f.andThen(g)</code></li></ol><ul><li>함수 f, g가 있을 때 함수 f를 먼저 적용하고, 그 다음에 함수 g를 적용한다.</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> g <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> h <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><code>f.compose(g)</code></li></ol><ul><li>반대로 g를 먼저 적용하고 f를 적용한다.</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> g <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> h <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">compose</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><code>identity()</code></li></ol><ul><li>함수를 적용하기 전과 후가 동일한 항등 함수가 필요할 때 사용한다.</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> x <span class="token operator">-&gt;</span> x<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 위의 문장과 동일</span></span>
<span class="line"><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> <span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>항등 함수는 잘 사용되지 않는 편이며, <code>map()</code> 으로 변환 작업할 때 변환 없이 그대로 처리하고자 할 때 사용한다.</li></ul><h3 id="predicate의-결합" tabindex="-1"><a class="header-anchor" href="#predicate의-결합"><span>Predicate의 결합</span></a></h3><ul><li>여러 Predicate를 and(), or(), negate()로 연결해서 하나의 새로운 Predicate로 결합할 수 있다.</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> i <span class="token operator">-&gt;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> q <span class="token operator">=</span> i <span class="token operator">-&gt;</span> i <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> r <span class="token operator">=</span> i <span class="token operator">-&gt;</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> notP <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// i &gt;= 100</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 100 &lt;= i &amp;&amp; (i &lt; 200 || i % 2 == 0)</span></span>
<span class="line"><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> all <span class="token operator">=</span> notP<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>all<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>isEqual()</code>은 두 대상을 비교하는 Predicate를 만들 때 사용한다. 먼저 <code>isEqual()</code>의 매개변수로 비교대상을 하나 지정하고, 또 다른 비교대상은 <code>test()</code>의 매개변수로 지정한다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// str1과 str2가 같은지 비교</span></span>
<span class="line"><span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token class-name">Predicate</span><span class="token punctuation">.</span><span class="token function">isEqual</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>References</span></a></h2><ul><li>Java의 정석</li><li>gpt4o</li></ul>`,70),l=[p];function c(o,i){return a(),s("div",null,l)}const d=n(e,[["render",c],["__file","functional-interface-lambda.html.vue"]]),r=JSON.parse('{"path":"/java/functional-interface-lambda.html","title":"함수형 인터페이스와 람다","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Functional Interface, 함수형 인터페이스","slug":"functional-interface-함수형-인터페이스","link":"#functional-interface-함수형-인터페이스","children":[{"level":3,"title":"사용","slug":"사용","link":"#사용","children":[]},{"level":3,"title":"왜 필요한가","slug":"왜-필요한가","link":"#왜-필요한가","children":[]}]},{"level":2,"title":"Lambda Expression, 람다식","slug":"lambda-expression-람다식","link":"#lambda-expression-람다식","children":[{"level":3,"title":"특징","slug":"특징","link":"#특징","children":[]}]},{"level":2,"title":"java.util.function","slug":"java-util-function","link":"#java-util-function","children":[{"level":3,"title":"매개변수가 두 개인 인터페이스","slug":"매개변수가-두-개인-인터페이스","link":"#매개변수가-두-개인-인터페이스","children":[]},{"level":3,"title":"UnaryOperator와 BinaryOperator","slug":"unaryoperator와-binaryoperator","link":"#unaryoperator와-binaryoperator","children":[]},{"level":3,"title":"컬렉션 프레임워크와 함수형 인터페이스","slug":"컬렉션-프레임워크와-함수형-인터페이스","link":"#컬렉션-프레임워크와-함수형-인터페이스","children":[]},{"level":3,"title":"기본형을 사용하는 인터페이스","slug":"기본형을-사용하는-인터페이스","link":"#기본형을-사용하는-인터페이스","children":[]}]},{"level":2,"title":"Function의 합성과 Predicate의 결합","slug":"function의-합성과-predicate의-결합","link":"#function의-합성과-predicate의-결합","children":[{"level":3,"title":"Function의 합성","slug":"function의-합성","link":"#function의-합성","children":[]},{"level":3,"title":"Predicate의 결합","slug":"predicate의-결합","link":"#predicate의-결합","children":[]}]},{"level":2,"title":"References","slug":"references","link":"#references","children":[]}],"git":{"updatedTime":1725244757000,"contributors":[{"name":"depark","email":"mem29238@gmail.com","commits":1}]},"filePathRelative":"java/functional-interface-lambda.md"}');export{d as comp,r as data};
