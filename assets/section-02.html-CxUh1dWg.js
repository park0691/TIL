import{_ as n,c as s,o as a,b as t}from"./app-CK66dcsB.js";const p="/TIL/images/lecture/spring-security-s2-1.png",e="/TIL/images/lecture/spring-security-s2-2.png",c="/TIL/images/lecture/spring-security-s2-3.png",o="/TIL/images/lecture/spring-security-s2-4.png",l="/TIL/images/lecture/spring-security-s2-5.png",i="/TIL/images/lecture/spring-security-s2-6.png",u="/TIL/images/lecture/spring-security-s2-7.png",r="/TIL/images/lecture/spring-security-s2-8.png",k="/TIL/images/lecture/spring-security-s2-9.png",d="/TIL/images/lecture/spring-security-s2-10.png",v="/TIL/images/lecture/spring-security-s2-11.png",m="/TIL/images/lecture/spring-security-s2-12.png",y={},b=t(`<h1 id="초기화-과정" tabindex="-1"><a class="header-anchor" href="#초기화-과정"><span>초기화 과정</span></a></h1><div class="custom-container warning"><p class="custom-container-title">정리</p><p>WebSecurity는 FilterChainProxy를 만드는 것이 목적이고, 그 안에는 SecurityFilterChain이 들어가야 한다. 이 필터들을 통해 클라이언트의 요청을 처리한다. 그 필터들은 HttpSecurity가 만들었다.</p><p>HttpSecurity는 SecurityConfigurer 구현체를 통해 보안을 위한 각종 Filter를 만들고 만들어낸 여러 필터들을 담은 SecurityFilterChain을 만들어낸다.</p><p>DelegatingFilterProxy는 스프링 컨테이너와 서블릿 사이의 연결 고리 역할을 하는 필터 클래스로 스프링 애플리케이션 컨텍스트를 찾아내고 FilterChainProxy를 읽어온다. 실제로 중요한 보안 역할을 하는 클래스는 FilterChainProxy</p></div><h2 id="기본-보안을-위한-자동-설정" tabindex="-1"><a class="header-anchor" href="#기본-보안을-위한-자동-설정"><span>기본 보안을 위한 자동 설정</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>security<span class="token punctuation">.</span>servlet</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token constant">SERVLET</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">SpringBootWebSecurityConfiguration</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">	<span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token annotation punctuation">@ConditionalOnDefaultWebSecurity</span></span>
<span class="line">	<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SecurityFilterChainConfiguration</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">		<span class="token annotation punctuation">@Bean</span></span>
<span class="line">		<span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token class-name">SecurityProperties</span><span class="token punctuation">.</span><span class="token constant">BASIC_AUTH_ORDER</span><span class="token punctuation">)</span></span>
<span class="line">		<span class="token class-name">SecurityFilterChain</span> <span class="token function">defaultSecurityFilterChain</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token comment">// 기본적으로 모든 요청에 대해 인증 여부를 검증한다.</span></span>
<span class="line">			http<span class="token punctuation">.</span><span class="token function">authorizeHttpRequests</span><span class="token punctuation">(</span><span class="token punctuation">(</span>requests<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> requests<span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token comment">// 인증 방식은 폼 로그인 방식과</span></span>
<span class="line">			http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token comment">// httpBasic 로그인 방식을 제공한다.</span></span>
<span class="line">			http<span class="token punctuation">.</span><span class="token function">httpBasic</span><span class="token punctuation">(</span><span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>다음 자동 설정 클래스에 의해 서버가 기동되면 스프링 시큐리티의 초기화 작업 및 보안 설정이 진행된다.</p><p><strong>[문제점]</strong></p><ul><li>계정 추가나 권한 추가시 문제</li><li>더 세부적이고 추가적인 보안 기능이 제공되지 않음</li></ul><p>인증 승인이 이루어질 수 있도록 한 개의 계정이 기본 제공된다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;spring.security&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityProperties</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">private</span> <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>SecurityProperties</code> 설정 클래스에서 기본 계정이 생성된다.</p><ul><li>username : user</li><li>password : 랜덤 문자열</li></ul><h2 id="securitybuilder-securityconfigurer" tabindex="-1"><a class="header-anchor" href="#securitybuilder-securityconfigurer"><span>SecurityBuilder, SecurityConfigurer</span></a></h2><p><img src="`+p+'" alt="image"></p><ul><li><code>SecurityBuilder</code>는 웹 보안을 구성하는 빈 객체와 설정 클래스를 생성하는 빌더 클래스 <ul><li>대표적으로 <code>WebSecurity, HttpSecurity</code> 구현체가 있다.</li><li><code>SecurityConfigurer</code>를 사용하며 인증 및 인가 초기화 작업은 <code>SecurityConfigurer</code>에 의해 진행된다.</li></ul></li><li><code>SecurityConfigurer</code>는 HTTP 요청과 관련된 보안 처리를 담당하는 필터들을 생성하고 여러 초기화 설정에 관여한다.</li></ul><p><img src="'+e+`" alt="image"></p><p>HttpSecurity가 SecurityConfigurer 구현체(e.g. LogoutConfigurer)를 생성한다. 해당 클래스의 init, configure 메소드를 통해 초기화 작업이 일어나서 Filter(e.g. LogoutFilter)를 생성한다.</p><p>각 SecurityConfigurer 구현체들은 특정 보안에 관련된 필터를 생성한다.</p><p><strong>[SecurityBuilder]</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SecurityBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token class-name">O</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>오브젝트를 빌드하는 빌더 클래스임을 알 수 있다.</li></ul><p><strong>[SecurityConfigurer]</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SecurityConfigurer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">,</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">SecurityBuilder</span><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">B</span> builder<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">B</span> builder<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Builder를 매개변수로 받는다.</li></ul><p><strong>[HttpSecurityConfiguration]</strong></p><p>HttpSecurity 빈 생성 메소드 <code>HttpSecurityConfiguration.httpSecurity()</code></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token constant">HTTPSECURITY_BEAN_NAME</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">&quot;prototype&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token class-name">HttpSecurity</span> <span class="token function">httpSecurity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">LazyPasswordEncoder</span> passwordEncoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyPasswordEncoder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">AuthenticationManagerBuilder</span> authenticationBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultPasswordEncoderAuthenticationManagerBuilder</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>objectPostProcessor<span class="token punctuation">,</span> passwordEncoder<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    authenticationBuilder<span class="token punctuation">.</span><span class="token function">parentAuthenticationManager</span><span class="token punctuation">(</span><span class="token function">authenticationManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    authenticationBuilder<span class="token punctuation">.</span><span class="token function">authenticationEventPublisher</span><span class="token punctuation">(</span><span class="token function">getAuthenticationEventPublisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">HttpSecurity</span> http <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpSecurity</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>objectPostProcessor<span class="token punctuation">,</span> authenticationBuilder<span class="token punctuation">,</span> <span class="token function">createSharedObjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">WebAsyncManagerIntegrationFilter</span> webAsyncManagerIntegrationFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebAsyncManagerIntegrationFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    webAsyncManagerIntegrationFilter<span class="token punctuation">.</span><span class="token function">setSecurityContextHolderStrategy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>securityContextHolderStrategy<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// @formatter:off</span></span>
<span class="line">    http</span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">addFilter</span><span class="token punctuation">(</span>webAsyncManagerIntegrationFilter<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">exceptionHandling</span><span class="token punctuation">(</span><span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">sessionManagement</span><span class="token punctuation">(</span><span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">securityContext</span><span class="token punctuation">(</span><span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">requestCache</span><span class="token punctuation">(</span><span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">anonymous</span><span class="token punctuation">(</span><span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">servletApi</span><span class="token punctuation">(</span><span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultLoginPageConfigurer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    http<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// @formatter:on</span></span>
<span class="line">    <span class="token function">applyCorsIfAvailable</span><span class="token punctuation">(</span>http<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">applyDefaultConfigurers</span><span class="token punctuation">(</span>http<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> http<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>prototype 스코프 → 싱글톤 빈이 아니라 HttpSecurity 생성할 때마다 빈이 생성됨</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>다음 메소드를 보면</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token class-name">HttpSecurity</span> <span class="token function">csrf</span><span class="token punctuation">(</span><span class="token class-name">Customizer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CsrfConfigurer</span><span class="token punctuation">&lt;</span><span class="token class-name">HttpSecurity</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> csrfCustomizer<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    csrfCustomizer<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span><span class="token function">getOrApply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CsrfConfigurer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">HttpSecurity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CsrfConfigurer 클래스를 이용하여 설정하는데 이 클래스는 <u>SecurityConfigurer를 상속받는다</u>.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfigurerAdapter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">,</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">SecurityBuilder</span><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">SecurityConfigurer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">,</span> <span class="token class-name">B</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>초기화 작업 때 Configurer 클래스를 생성해서 초기화 작업하는 것을 알 수 있다.</p><p>마찬가지로,</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">exceptionHandling</span><span class="token punctuation">(</span><span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>메소드를 보면</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token class-name">HttpSecurity</span> <span class="token function">exceptionHandling</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">Customizer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ExceptionHandlingConfigurer</span><span class="token punctuation">&lt;</span><span class="token class-name">HttpSecurity</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> exceptionHandlingCustomizer<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">    exceptionHandlingCustomizer<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span><span class="token function">getOrApply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExceptionHandlingConfigurer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">HttpSecurity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>마찬가지로 ExceptionHandlingConfigurer 클래스를 이용하여 설정한다.</p><p>이 과정을 통해 HttpSecurity 빈을 생성해서 반환한다.</p><p>반환된 빈을 주입받아 초기화하는 클래스는 <code>SpringBootWebSecurityConfiguration</code>에 있다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token constant">SERVLET</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">SpringBootWebSecurityConfiguration</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">	<span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token annotation punctuation">@ConditionalOnDefaultWebSecurity</span></span>
<span class="line">	<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SecurityFilterChainConfiguration</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">		<span class="token annotation punctuation">@Bean</span></span>
<span class="line">		<span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token class-name">SecurityProperties</span><span class="token punctuation">.</span><span class="token constant">BASIC_AUTH_ORDER</span><span class="token punctuation">)</span></span>
<span class="line">		<span class="token class-name">SecurityFilterChain</span> <span class="token function">defaultSecurityFilterChain</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">			http<span class="token punctuation">.</span><span class="token function">authorizeHttpRequests</span><span class="token punctuation">(</span><span class="token punctuation">(</span>requests<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> requests<span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			http<span class="token punctuation">.</span><span class="token function">httpBasic</span><span class="token punctuation">(</span><span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>여기서의 HttpSecurity 빈을 디버깅으로 살펴보면 많은 configurer들이 들어와 있는 것을 확인할 수 있다.</p><p><img src="`+c+`" alt="image"></p><p>위 메소드에서 http의 각 메소드가 실행될 때마다 Configurer들이 생성되어서 configurers에 추가된다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token class-name">HttpSecurity</span> <span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token class-name">Customizer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FormLoginConfigurer</span><span class="token punctuation">&lt;</span><span class="token class-name">HttpSecurity</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> formLoginCustomizer<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">    formLoginCustomizer<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span><span class="token function">getOrApply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FormLoginConfigurer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">HttpSecurity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">HttpSecurity</span> <span class="token function">httpBasic</span><span class="token punctuation">(</span><span class="token class-name">Customizer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpBasicConfigurer</span><span class="token punctuation">&lt;</span><span class="token class-name">HttpSecurity</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> httpBasicCustomizer<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">    httpBasicCustomizer<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span><span class="token function">getOrApply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpBasicConfigurer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">HttpSecurity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이 메소드들이 전부 실행된 후</p><p><img src="`+o+`" alt="image"></p><p>configurers 안의 Configurer가 3개 더 늘어난 것을 확인할 수 있다.</p><p>설정 클래스는 생성되어 있으나 아직 init, configure 메소드 실행이 이루어지지 않았다.</p><p><code>http.build()</code> → <code>doBuild()</code> 메소드를 보면</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractConfiguredSecurityBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">,</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">SecurityBuilder</span><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">		<span class="token keyword">extends</span> <span class="token class-name">AbstractSecurityBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">O</span> <span class="token function">doBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>configurers<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>buildState <span class="token operator">=</span> <span class="token class-name">BuildState</span><span class="token punctuation">.</span><span class="token constant">INITIALIZING</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">beforeInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>buildState <span class="token operator">=</span> <span class="token class-name">BuildState</span><span class="token punctuation">.</span><span class="token constant">CONFIGURING</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">beforeConfigure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>buildState <span class="token operator">=</span> <span class="token class-name">BuildState</span><span class="token punctuation">.</span><span class="token constant">BUILDING</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">O</span> result <span class="token operator">=</span> <span class="token function">performBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>buildState <span class="token operator">=</span> <span class="token class-name">BuildState</span><span class="token punctuation">.</span><span class="token constant">BUILT</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>init(), configure()</code> 메소드가 호출되는 것을 볼 수 있다.</p><p><code>init()</code> 메소드를 보면</p><p><img src="`+l+`" alt="image"></p><p>전달 받은 13개의 Configurer를 확인할 수 있다.</p><p>각 configurer의 init을 호출한다. <code>configurer.init((B) this);</code></p><p>SessionManagementConfigurer의 init() 메소드를 보면</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">SessionManagementConfigurer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">H</span> <span class="token keyword">extends</span> <span class="token class-name">HttpSecurityBuilder</span><span class="token punctuation">&lt;</span><span class="token class-name">H</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">		<span class="token keyword">extends</span> <span class="token class-name">AbstractHttpConfigurer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SessionManagementConfigurer</span><span class="token punctuation">&lt;</span><span class="token class-name">H</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">H</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">	<span class="token annotation punctuation">@Override</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">H</span> http<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">SecurityContextRepository</span> securityContextRepository <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">getSharedObject</span><span class="token punctuation">(</span><span class="token class-name">SecurityContextRepository</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">boolean</span> stateless <span class="token operator">=</span> <span class="token function">isStateless</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span>securityContextRepository <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">if</span> <span class="token punctuation">(</span>stateless<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">				http<span class="token punctuation">.</span><span class="token function">setSharedObject</span><span class="token punctuation">(</span><span class="token class-name">SecurityContextRepository</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RequestAttributeSecurityContextRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">				<span class="token keyword">this</span><span class="token punctuation">.</span>sessionManagementSecurityContextRepository <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NullSecurityContextRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">			<span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">				<span class="token class-name">HttpSessionSecurityContextRepository</span> httpSecurityRepository <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpSessionSecurityContextRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">				httpSecurityRepository<span class="token punctuation">.</span><span class="token function">setDisableUrlRewriting</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>enableSessionUrlRewriting<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">				httpSecurityRepository<span class="token punctuation">.</span><span class="token function">setAllowSessionCreation</span><span class="token punctuation">(</span><span class="token function">isAllowSessionCreation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">				<span class="token class-name">AuthenticationTrustResolver</span> trustResolver <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">getSharedObject</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationTrustResolver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">				<span class="token keyword">if</span> <span class="token punctuation">(</span>trustResolver <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">					httpSecurityRepository<span class="token punctuation">.</span><span class="token function">setTrustResolver</span><span class="token punctuation">(</span>trustResolver<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">				<span class="token punctuation">}</span></span>
<span class="line">				<span class="token keyword">this</span><span class="token punctuation">.</span>sessionManagementSecurityContextRepository <span class="token operator">=</span> httpSecurityRepository<span class="token punctuation">;</span></span>
<span class="line">				<span class="token class-name">DelegatingSecurityContextRepository</span> defaultRepository <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelegatingSecurityContextRepository</span><span class="token punctuation">(</span></span>
<span class="line">						httpSecurityRepository<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RequestAttributeSecurityContextRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">				http<span class="token punctuation">.</span><span class="token function">setSharedObject</span><span class="token punctuation">(</span><span class="token class-name">SecurityContextRepository</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> defaultRepository<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		<span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">this</span><span class="token punctuation">.</span>sessionManagementSecurityContextRepository <span class="token operator">=</span> securityContextRepository<span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		<span class="token class-name">RequestCache</span> requestCache <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">getSharedObject</span><span class="token punctuation">(</span><span class="token class-name">RequestCache</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span>requestCache <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">if</span> <span class="token punctuation">(</span>stateless<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">				http<span class="token punctuation">.</span><span class="token function">setSharedObject</span><span class="token punctuation">(</span><span class="token class-name">RequestCache</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">NullRequestCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		http<span class="token punctuation">.</span><span class="token function">setSharedObject</span><span class="token punctuation">(</span><span class="token class-name">SessionAuthenticationStrategy</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token function">getSessionAuthenticationStrategy</span><span class="token punctuation">(</span>http<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		http<span class="token punctuation">.</span><span class="token function">setSharedObject</span><span class="token punctuation">(</span><span class="token class-name">InvalidSessionStrategy</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token function">getInvalidSessionStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>http.setSharedObject()</code>를 써서 객체를 공유하는 작업을 한다.</p><p><code>configure()</code> 메소드를 보면</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SecurityConfigurer</span><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">,</span> <span class="token class-name">B</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> configurers <span class="token operator">=</span> <span class="token function">getConfigurers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SecurityConfigurer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">,</span> <span class="token class-name">B</span><span class="token punctuation">&gt;</span></span> configurer <span class="token operator">:</span> configurers<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        configurer<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">B</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>마찬가지로 각 configurer의 configure()를 호출한다.</p><p>호출되는 CsrfConfigurer의 configure() 메소드를 보면</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">CsrfConfigurer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">H</span> <span class="token keyword">extends</span> <span class="token class-name">HttpSecurityBuilder</span><span class="token punctuation">&lt;</span><span class="token class-name">H</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span>	</span>
<span class="line">    <span class="token keyword">extends</span> <span class="token class-name">AbstractHttpConfigurer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CsrfConfigurer</span><span class="token punctuation">&lt;</span><span class="token class-name">H</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">H</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">	<span class="token annotation punctuation">@Override</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">H</span> http<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">CsrfFilter</span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CsrfFilter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>csrfTokenRepository<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token class-name">RequestMatcher</span> requireCsrfProtectionMatcher <span class="token operator">=</span> <span class="token function">getRequireCsrfProtectionMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span>requireCsrfProtectionMatcher <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			filter<span class="token punctuation">.</span><span class="token function">setRequireCsrfProtectionMatcher</span><span class="token punctuation">(</span>requireCsrfProtectionMatcher<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		<span class="token class-name">AccessDeniedHandler</span> accessDeniedHandler <span class="token operator">=</span> <span class="token function">createAccessDeniedHandler</span><span class="token punctuation">(</span>http<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token class-name">ObservationRegistry</span> registry <span class="token operator">=</span> <span class="token function">getObservationRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">isNoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token class-name">ObservationMarkingAccessDeniedHandler</span> observable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObservationMarkingAccessDeniedHandler</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			accessDeniedHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompositeAccessDeniedHandler</span><span class="token punctuation">(</span>observable<span class="token punctuation">,</span> accessDeniedHandler<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span>accessDeniedHandler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			filter<span class="token punctuation">.</span><span class="token function">setAccessDeniedHandler</span><span class="token punctuation">(</span>accessDeniedHandler<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		<span class="token class-name">LogoutConfigurer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">H</span><span class="token punctuation">&gt;</span></span> logoutConfigurer <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">getConfigurer</span><span class="token punctuation">(</span><span class="token class-name">LogoutConfigurer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span>logoutConfigurer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			logoutConfigurer<span class="token punctuation">.</span><span class="token function">addLogoutHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CsrfLogoutHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>csrfTokenRepository<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		<span class="token class-name">SessionManagementConfigurer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">H</span><span class="token punctuation">&gt;</span></span> sessionConfigurer <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">getConfigurer</span><span class="token punctuation">(</span><span class="token class-name">SessionManagementConfigurer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span>sessionConfigurer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			sessionConfigurer<span class="token punctuation">.</span><span class="token function">addSessionAuthenticationStrategy</span><span class="token punctuation">(</span><span class="token function">getSessionAuthenticationStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>requestHandler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			filter<span class="token punctuation">.</span><span class="token function">setRequestHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>requestHandler<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		filter <span class="token operator">=</span> <span class="token function">postProcess</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		http<span class="token punctuation">.</span><span class="token function">addFilter</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>필터를 만들고 여러가지 보안 기능을 설정하고 httpSecurity에 필터를 추가하는 것을 확인할 수 있다.</p><p><code>http.build()</code> 끝나면 → SecurityFilterChain이 생성된다.</p><h2 id="httpsecurity-websecurity" tabindex="-1"><a class="header-anchor" href="#httpsecurity-websecurity"><span>HttpSecurity, WebSecurity</span></a></h2><h3 id="httpsecurity" tabindex="-1"><a class="header-anchor" href="#httpsecurity"><span>HttpSecurity</span></a></h3><ul><li><code>HttpSecurityConfiguration</code>에서 HttpSecurity를 생성하고 초기화를 진행한다. <ul><li>Configurer를 만들고 HttpSecurity가 생성되면 Configurer의 init, configure 메소드로 필터를 생성하고 등록한다.</li></ul></li><li>보안에 필요한 각 설정 클래스와 필터들을 생성하고 최종적으로 SecurityFilterChain 빈 생성 (SecurityFilterChain이 인증, 인가 처리할 필터들을 가지고 있다.)</li></ul><p><img src="`+i+'" alt="image"></p><h3 id="securityfilterchain" tabindex="-1"><a class="header-anchor" href="#securityfilterchain"><span>SecurityFilterChain</span></a></h3><p><img src="'+u+'" alt="image"></p><p><em><strong>boolean matches(HttpServletRequest request)</strong></em></p><ul><li>요청이 현재 SecurityFilterChain에 의해 처리되어야 하는지 결정한다. <ul><li>true 반환 → 현재 요청이 이 필터 체인에 의해 처리되어야 함</li><li>false 반환 → 다른 필터 체인이나 처리 로직에 의해 처리되어야 함</li></ul></li><li>이를 통해 특정 요청에 대해 적절한 보안 필터링 로직이 적용될 수 있도록 한다.</li></ul><p><em><strong>List&lt;Filter&gt; getFilters()</strong></em></p><ul><li>현재 SecurityFilterChain에 포함된 Filter 리스트를 반환한다.</li><li>어떤 필터가 현재 필터 체인에 포함되어 있는지 확인할 수 있으며, 각 필터는 요청 처리 과정에서 특정 작업(인증, 권한 부여, 로깅 등)을 수행한다.</li></ul><p><img src="'+r+'" alt="image"></p><p>RequestMatcher를 통해 필터가 동작해야 하는지 확인한다.</p><ul><li><code>/users</code> (특정 URI) 매치되면 → 해당 SecurityFilterChain 타고, 매치 안 되면 해당 SecurityFilterChain을 건너띈다.</li></ul><h3 id="websecurity" tabindex="-1"><a class="header-anchor" href="#websecurity"><span>WebSecurity</span></a></h3><ul><li><code>WebSecurityConfiguration</code>에서 WebSecurity를 생성하고 초기화를 진행한다.</li><li>HttpSecurity에서 생성한 SecurityFilterChain을 SecurityBuilder에 저장한다. <ul><li>여러 개의 SecurityFilterChain을 가질 수 있다.</li></ul></li><li>WebSecurity가 build()를 실행하면 SecurityBuilder에서 SecurityFilterChain을 꺼내어 FilterChainProxy 생성자에게 전달한다. → 최종적으로 FilterChainProxy 생성</li><li>WebSecurity가 HttpSecurity의 상위 개념 <ul><li>HttpSecurity가 만든 빈을 WebSecurity가 만든 빈에 저장하므로</li></ul></li><li>최종적으로 만들어진 FilterChainProxy가 모든 요청에 대해 1차적으로 필터들을 실행시키는 객체가 된다.</li></ul><p><img src="'+k+`" alt="image"></p><p>이러한 흐름은 FilterChainProxy을 만들어서 SecurityFilterChain을 저장하기 위한 과정이었다.</p><p>FilterChainProxy가 모든 보안 설정들어있는 필터 목록들을 가지고 있다 볼 수 있다.</p><p><strong>[생성 과정]</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">ImportAware</span><span class="token punctuation">,</span> <span class="token class-name">BeanClassLoaderAware</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">	<span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFilterChainProxySecurityConfigurer</span><span class="token punctuation">(</span><span class="token class-name">ObjectPostProcessor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> objectPostProcessor<span class="token punctuation">,</span></span>
<span class="line">			<span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">this</span><span class="token punctuation">.</span>webSecurity <span class="token operator">=</span> objectPostProcessor<span class="token punctuation">.</span><span class="token function">postProcess</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebSecurity</span><span class="token punctuation">(</span>objectPostProcessor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>debugEnabled <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">this</span><span class="token punctuation">.</span>webSecurity<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>debugEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SecurityConfigurer</span><span class="token punctuation">&lt;</span><span class="token class-name">Filter</span><span class="token punctuation">,</span> <span class="token class-name">WebSecurity</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> webSecurityConfigurers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutowiredWebSecurityConfigurersIgnoreParents</span><span class="token punctuation">(</span></span>
<span class="line">				beanFactory<span class="token punctuation">)</span></span>
<span class="line">			<span class="token punctuation">.</span><span class="token function">getWebSecurityConfigurers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		webSecurityConfigurers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">AnnotationAwareOrderComparator</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token class-name">Integer</span> previousOrder <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token class-name">Object</span> previousConfig <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SecurityConfigurer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Filter</span><span class="token punctuation">,</span> <span class="token class-name">WebSecurity</span><span class="token punctuation">&gt;</span></span> config <span class="token operator">:</span> webSecurityConfigurers<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token class-name">Integer</span> order <span class="token operator">=</span> <span class="token class-name">AnnotationAwareOrderComparator</span><span class="token punctuation">.</span><span class="token function">lookupOrder</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token keyword">if</span> <span class="token punctuation">(</span>previousOrder <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> previousOrder<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">				<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;@Order on WebSecurityConfigurers must be unique. Order of &quot;</span> <span class="token operator">+</span> order</span>
<span class="line">						<span class="token operator">+</span> <span class="token string">&quot; was already used on &quot;</span> <span class="token operator">+</span> previousConfig <span class="token operator">+</span> <span class="token string">&quot;, so it cannot be used on &quot;</span> <span class="token operator">+</span> config <span class="token operator">+</span> <span class="token string">&quot; too.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">			previousOrder <span class="token operator">=</span> order<span class="token punctuation">;</span></span>
<span class="line">			previousConfig <span class="token operator">=</span> config<span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SecurityConfigurer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Filter</span><span class="token punctuation">,</span> <span class="token class-name">WebSecurity</span><span class="token punctuation">&gt;</span></span> webSecurityConfigurer <span class="token operator">:</span> webSecurityConfigurers<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">this</span><span class="token punctuation">.</span>webSecurity<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>webSecurityConfigurer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		<span class="token keyword">this</span><span class="token punctuation">.</span>webSecurityConfigurers <span class="token operator">=</span> webSecurityConfigurers<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HttpSecurity.build() 과정에서 다음 빌더의 <code>doBuild()</code> 메소드가 호출된다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractConfiguredSecurityBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">,</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">SecurityBuilder</span><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">		<span class="token keyword">extends</span> <span class="token class-name">AbstractSecurityBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">O</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">O</span> <span class="token function">doBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>configurers<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>buildState <span class="token operator">=</span> <span class="token class-name">BuildState</span><span class="token punctuation">.</span><span class="token constant">INITIALIZING</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">beforeInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>buildState <span class="token operator">=</span> <span class="token class-name">BuildState</span><span class="token punctuation">.</span><span class="token constant">CONFIGURING</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">beforeConfigure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>buildState <span class="token operator">=</span> <span class="token class-name">BuildState</span><span class="token punctuation">.</span><span class="token constant">BUILDING</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">O</span> result <span class="token operator">=</span> <span class="token function">performBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>buildState <span class="token operator">=</span> <span class="token class-name">BuildState</span><span class="token punctuation">.</span><span class="token constant">BUILT</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이 때 <code>performBuild()</code> 코드를 보면</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">HttpSecurity</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractConfiguredSecurityBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DefaultSecurityFilterChain</span><span class="token punctuation">,</span> <span class="token class-name">HttpSecurity</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">	<span class="token keyword">implements</span> <span class="token class-name">SecurityBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DefaultSecurityFilterChain</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">HttpSecurityBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpSecurity</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token annotation punctuation">@Override</span></span>
<span class="line">	<span class="token keyword">protected</span> <span class="token class-name">DefaultSecurityFilterChain</span> <span class="token function">performBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">ExpressionUrlAuthorizationConfigurer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> expressionConfigurer <span class="token operator">=</span> <span class="token function">getConfigurer</span><span class="token punctuation">(</span></span>
<span class="line">				<span class="token class-name">ExpressionUrlAuthorizationConfigurer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token class-name">AuthorizeHttpRequestsConfigurer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> httpConfigurer <span class="token operator">=</span> <span class="token function">getConfigurer</span><span class="token punctuation">(</span><span class="token class-name">AuthorizeHttpRequestsConfigurer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">boolean</span> oneConfigurerPresent <span class="token operator">=</span> expressionConfigurer <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">^</span> httpConfigurer <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">(</span>expressionConfigurer <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> httpConfigurer <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span> oneConfigurerPresent<span class="token punctuation">,</span></span>
<span class="line">				<span class="token string">&quot;authorizeHttpRequests cannot be used in conjunction with authorizeRequests. Please select just one.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">this</span><span class="token punctuation">.</span>filters<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">OrderComparator</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Filter</span><span class="token punctuation">&gt;</span></span> sortedFilters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>filters<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Filter</span> filter <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>filters<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			sortedFilters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">OrderedFilter</span><span class="token punctuation">)</span> filter<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSecurityFilterChain</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>requestMatcher<span class="token punctuation">,</span> sortedFilters<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>필터를 리스트에 추가하고</p><p><code>return new DefaultSecurityFilterChain(this.requestMatcher, sortedFilters);</code></p><ul><li>DefaultSecurityFilterChain을 생성한다.</li></ul><p>WebSecurity가 받은 FilterChain을 어떻게 사용할까?</p><p><img src="`+d+`" alt="image"></p><p>WebSecurityConfiguration의 위 메소드에서 하나의 필터 체인이 정상 등록되어 있음을 확인할 수 있다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token class-name">AbstractSecurityWebApplicationInitializer</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_FILTER_NAME</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">Filter</span> <span class="token function">springSecurityFilterChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">boolean</span> hasFilterChain <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>securityFilterChains<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasFilterChain<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>webSecurity<span class="token punctuation">.</span><span class="token function">addSecurityFilterChainBuilder</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>httpSecurity<span class="token punctuation">.</span><span class="token function">authorizeHttpRequests</span><span class="token punctuation">(</span><span class="token punctuation">(</span>authorize<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> authorize<span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>httpSecurity<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token class-name">Customizer</span><span class="token punctuation">.</span><span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>httpSecurity<span class="token punctuation">.</span><span class="token function">httpBasic</span><span class="token punctuation">(</span><span class="token class-name">Customizer</span><span class="token punctuation">.</span><span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>httpSecurity<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SecurityFilterChain</span> securityFilterChain <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>securityFilterChains<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>webSecurity<span class="token punctuation">.</span><span class="token function">addSecurityFilterChainBuilder</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> securityFilterChain<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">WebSecurityCustomizer</span> customizer <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>webSecurityCustomizers<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        customizer<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>webSecurity<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>webSecurity<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>그리고 WebSecurity의 securityFilterChainBuilders 속성에 SecurityFilterChain을 Add한다. (13L)</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token class-name">WebSecurity</span> <span class="token function">addSecurityFilterChainBuilder</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">SecurityBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">SecurityFilterChain</span><span class="token punctuation">&gt;</span></span> securityFilterChainBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>securityFilterChainBuilders<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>securityFilterChainBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이후 <code>return this.webSecurity.build();</code> → <code>WebSecurity.performBuild()</code></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Override</span></span>
<span class="line"><span class="token keyword">protected</span> <span class="token class-name">Filter</span> <span class="token function">performBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SecurityBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">SecurityFilterChain</span><span class="token punctuation">&gt;</span></span> securityFilterChainBuilder <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>securityFilterChainBuilders<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">SecurityFilterChain</span> securityFilterChain <span class="token operator">=</span> securityFilterChainBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        securityFilterChains<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>securityFilterChain<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        requestMatcherPrivilegeEvaluatorsEntries</span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getRequestMatcherPrivilegeEvaluatorsEntry</span><span class="token punctuation">(</span>securityFilterChain<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token class-name">FilterChainProxy</span> filterChainProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterChainProxy</span><span class="token punctuation">(</span>securityFilterChains<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>securityFilterChains.add(securityFilterChain);</code></p><ul><li>앞에서 저장한 securityFilterChainBuilders에서 SecurityFilterChain을 빼와서 <code>List&lt;SecurityFilterChain&gt; securityFilterChains</code>에 더한다.</li></ul><p><code>FilterChainProxy filterChainProxy = new FilterChainProxy(securityFilterChains);</code></p><ul><li>그리고 securityFilterChains 전달하여 FilterChainProxy을 생성하고 반환하여 빌드가 완료된다.</li></ul><h2 id="delegatingfilterproxy-filterchainproxy" tabindex="-1"><a class="header-anchor" href="#delegatingfilterproxy-filterchainproxy"><span>DelegatingFilterProxy, FilterChainProxy</span></a></h2><h3 id="delegatingfilterproxy" tabindex="-1"><a class="header-anchor" href="#delegatingfilterproxy"><span>DelegatingFilterProxy</span></a></h3><p>스프링 시큐리티는 모든 작업을 필터 기반으로 수행한다. 그러나 서블릿 필터는 스프링의 기능(DI, AOP 등) 사용할 수 없다.</p><p>이 프록시를 통해 스프링에서 필터 타입의 클래스를 빈으로 생성하여 필터에 DI, AOP 등 스프링의 기능을 사용하기 위해 서블릿과 스프링 애플리케이션 컨텍스트 사이를 연결하는 다리 역할을 하도록 이 클래스를 설계했다.</p><ul><li>서블릿 컨테이너와 애플리케이션 컨텍스트 간의 연결고리 역할을 하는 <u>스프링에서 사용되는 특별한 필터</u></li><li>서블릿 필터의 기능을 수행하는 동시에 스프링 의존성 주입, 빈 관리 기능과 연동되도록 설계되었다.</li><li><code>springSecurityFilterChain</code> 이름으로 생성된 빈을 애플리케이션 컨텍스트에서 찾아 요청을 위임한다.</li></ul><p><img src="`+v+`" alt="image"></p><h3 id="filterchainproxy" tabindex="-1"><a class="header-anchor" href="#filterchainproxy"><span>FilterChainProxy</span></a></h3><ul><li><code>springSecurityFilterChain</code>의 이름으로 생성되는 필터 빈으로서 DelegatingFilterProxy 로부터 요청을 위임 받고 보안 처리 역할을 한다.</li><li>하나 이상의 SecurityFilterChain 객체들을 가지고 있으며 요청 URL 정보를 기준으로 적절한 SecurityFilterChain을 선택하여 필터를 호출한다.</li><li>HttpSecurity를 통해 API 추가 시 관련 필터들이 추가된다.</li><li>사용자의 요청을 필터 순서대로 호출함으로 보안 기능을 동작시키고 필요 시 직접 필터를 생성해서 기존의 필터 전.후에 추가할 수 있다.</li></ul><p><strong>[DelegatingFilterProxy 생성]</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@AutoConfiguration</span><span class="token punctuation">(</span>after <span class="token operator">=</span> <span class="token class-name">SecurityAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token constant">SERVLET</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">SecurityProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">AbstractSecurityWebApplicationInitializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">SessionCreationPolicy</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityFilterAutoConfiguration</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DEFAULT_FILTER_NAME</span> <span class="token operator">=</span> <span class="token class-name">AbstractSecurityWebApplicationInitializer</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_FILTER_NAME</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token annotation punctuation">@Bean</span></span>
<span class="line">	<span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token constant">DEFAULT_FILTER_NAME</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token class-name">DelegatingFilterProxyRegistrationBean</span> <span class="token function">securityFilterChainRegistration</span><span class="token punctuation">(</span></span>
<span class="line">			<span class="token class-name">SecurityProperties</span> securityProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">DelegatingFilterProxyRegistrationBean</span> registration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelegatingFilterProxyRegistrationBean</span><span class="token punctuation">(</span></span>
<span class="line">				<span class="token constant">DEFAULT_FILTER_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">         registration<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span>securityProperties<span class="token punctuation">.</span><span class="token function">getFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		registration<span class="token punctuation">.</span><span class="token function">setDispatcherTypes</span><span class="token punctuation">(</span><span class="token function">getDispatcherTypes</span><span class="token punctuation">(</span>securityProperties<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">return</span> registration<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractSecurityWebApplicationInitializer</span> <span class="token keyword">implements</span> <span class="token class-name">WebApplicationInitializer</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SERVLET_CONTEXT_PREFIX</span> <span class="token operator">=</span> <span class="token string">&quot;org.springframework.web.servlet.FrameworkServlet.CONTEXT.&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DEFAULT_FILTER_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;springSecurityFilterChain&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>빈을 만들 때 &#39;springSecurityFilterChain&#39; 이름을 전달하는 것을 확인할 수 있다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelegatingFilterProxyRegistrationBean</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractFilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DelegatingFilterProxy</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">		<span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token class-name">DelegatingFilterProxy</span> <span class="token function">getFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DelegatingFilterProxy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>targetBeanName<span class="token punctuation">,</span> <span class="token function">getWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">			<span class="token annotation punctuation">@Override</span></span>
<span class="line">			<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initFilterBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span></span>
<span class="line">				<span class="token comment">// Don&#39;t initialize filter bean on init()</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">		<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>this.targetBeanName = &quot;springSecurityFilterChain&quot;</code>으로 애플리케이션 컨텍스트에서 빈을 찾겠다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractFilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Filter</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">DynamicRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dynamic</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">	<span class="token keyword">protected</span> <span class="token class-name">Dynamic</span> <span class="token function">addRegistration</span><span class="token punctuation">(</span><span class="token class-name">String</span> description<span class="token punctuation">,</span> <span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">Filter</span> filter <span class="token operator">=</span> <span class="token function">getFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">return</span> servletContext<span class="token punctuation">.</span><span class="token function">addFilter</span><span class="token punctuation">(</span><span class="token function">getOrDeduceName</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>DelegatingFilterProxy 필터를 서블릿 컨테이너에 저장한다.</p><p><strong>[DelegatingFilterProxy 동작]</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelegatingFilterProxy</span> <span class="token keyword">extends</span> <span class="token class-name">GenericFilterBean</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">	<span class="token annotation punctuation">@Override</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span></span>
<span class="line">			<span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">		<span class="token comment">// Lazily initialize the delegate if necessary.</span></span>
<span class="line">		<span class="token class-name">Filter</span> delegateToUse <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span>delegateToUse <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">this</span><span class="token punctuation">.</span>delegateLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">				delegateToUse <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">;</span></span>
<span class="line">				<span class="token keyword">if</span> <span class="token punctuation">(</span>delegateToUse <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                      <span class="token comment">// 애플리케이션 컨텍스트 찾고 </span></span>
<span class="line">					<span class="token class-name">WebApplicationContext</span> wac <span class="token operator">=</span> <span class="token function">findWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">					<span class="token keyword">if</span> <span class="token punctuation">(</span>wac <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">						<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;No WebApplicationContext found: &quot;</span> <span class="token operator">+</span></span>
<span class="line">								<span class="token string">&quot;no ContextLoaderListener or DispatcherServlet registered?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">					<span class="token punctuation">}</span></span>
<span class="line">                      <span class="token comment">// 애플리케이션 컨텍스트에서 FilterChainProxy 받아와</span></span>
<span class="line">					delegateToUse <span class="token operator">=</span> <span class="token function">initDelegate</span><span class="token punctuation">(</span>wac<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">				<span class="token punctuation">}</span></span>
<span class="line">				<span class="token keyword">this</span><span class="token punctuation">.</span>delegate <span class="token operator">=</span> delegateToUse<span class="token punctuation">;</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">			<span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">				<span class="token keyword">this</span><span class="token punctuation">.</span>delegateLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">		<span class="token comment">// Let the delegate perform the actual doFilter operation.</span></span>
<span class="line">		<span class="token function">invokeDelegate</span><span class="token punctuation">(</span>delegateToUse<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> filterChain<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>애플리케이션 컨텍스트 찾고 → <code>initDelegate()</code> 호출</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelegatingFilterProxy</span> <span class="token keyword">extends</span> <span class="token class-name">GenericFilterBean</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token class-name">Filter</span> <span class="token function">initDelegate</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span> wac<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> targetBeanName <span class="token operator">=</span> <span class="token function">getTargetBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>targetBeanName <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;No target bean name set&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Filter</span> delegate <span class="token operator">=</span> wac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>targetBeanName<span class="token punctuation">,</span> <span class="token class-name">Filter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isTargetFilterLifecycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            delegate<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token function">getFilterConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> delegate<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>targetBeanName으로 <u>FilterChainProxy 빈 찾아온다</u>. 이후 <code>invokeDelegate()</code> 호출 → 실제 Security Filter 탄다.</p><h2 id="사용자-정의-보안-설정" tabindex="-1"><a class="header-anchor" href="#사용자-정의-보안-설정"><span>사용자 정의 보안 설정</span></a></h2><ul><li>한 개 이상의 SecurityFilterChain 타입의 빈을 정의한 후 인증 / 인가 API를 설정한다.</li></ul><p><img src="`+m+`" alt="image"></p><p><strong>[SecurityConfig 클래스 생성]</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// Spring Security 활성화. 웹 보안 설정.</span></span>
<span class="line"><span class="token annotation punctuation">@EnableWebSecurity</span></span>
<span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">SecurityFilterChain</span> <span class="token function">securityFilterChain</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span></span>
<span class="line">        http<span class="token punctuation">.</span><span class="token function">authorizeHttpRequests</span><span class="token punctuation">(</span>auth<span class="token operator">-&gt;</span> auth<span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token class-name">Customizer</span><span class="token punctuation">.</span><span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>모든 코드는 람다 형식으로 작성해야 한다. (시큐리티 7 버전부터 람다 형식만 지원 예정)</li><li>SecurityFilterChain을 빈으로 정의하면 자동설정에 의한 SecurityFilterChain 빈은 생성되지 않는다.</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">SpringBootWebSecurityConfiguration</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">	<span class="token annotation punctuation">@ConditionalOnDefaultWebSecurity</span></span>
<span class="line">	<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SecurityFilterChainConfiguration</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token annotation punctuation">@Bean</span></span>
<span class="line">		<span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token class-name">SecurityProperties</span><span class="token punctuation">.</span><span class="token constant">BASIC_AUTH_ORDER</span><span class="token punctuation">)</span></span>
<span class="line">		<span class="token class-name">SecurityFilterChain</span> <span class="token function">defaultSecurityFilterChain</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>자동 설정에 의한 필터 체인 빈 선언부의 <code>@ConditionalOnDefaultWebSecurity</code>를 추적하면</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">DefaultWebSecurityCondition</span> <span class="token keyword">extends</span> <span class="token class-name">AllNestedConditions</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">	<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">SecurityFilterChain</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Beans</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SecurityFilterChain 빈이 없는 경우에만 디폴트 시큐리티 필터 체인이 생성되는 것을 확인할 수 있다.</p><p><strong>[사용자 설정 추가]</strong> (1) application.yml</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">spring:</span>
<span class="line">  security:</span>
<span class="line">    user:</span>
<span class="line">      name: user</span>
<span class="line">      password: 1234</span>
<span class="line">      roles: USER</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(2) 자바 설정 클래스에 빈 생성</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">InMemoryUserDetailsManager</span> <span class="token function">inMemoryUserDetailsManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">UserDetails</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">withUsername</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">&quot;{noop}1234&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">authorities</span><span class="token punctuation">(</span><span class="token string">&quot;ROLE_USER&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">UserDetails</span> user2 <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">withUsername</span><span class="token punctuation">(</span><span class="token string">&quot;user2&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">&quot;{noop}1234&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">authorities</span><span class="token punctuation">(</span><span class="token string">&quot;ROLE_USER&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">UserDetails</span> user3 <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">withUsername</span><span class="token punctuation">(</span><span class="token string">&quot;user3&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">&quot;{noop}1234&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">authorities</span><span class="token punctuation">(</span><span class="token string">&quot;ROLE_USER&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryUserDetailsManager</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> user2<span class="token punctuation">,</span> user3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Bean</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">UserDetailsService</span> <span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">UserDetails</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">withUsername</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">&quot;{noop}1234&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">authorities</span><span class="token punctuation">(</span><span class="token string">&quot;USER&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">UserDetails</span> user2 <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">withUsername</span><span class="token punctuation">(</span><span class="token string">&quot;user2&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">&quot;{noop}1234&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">authorities</span><span class="token punctuation">(</span><span class="token string">&quot;USER&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">UserDetails</span> user3 <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">withUsername</span><span class="token punctuation">(</span><span class="token string">&quot;user3&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">&quot;{noop}1234&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">authorities</span><span class="token punctuation">(</span><span class="token string">&quot;USER&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryUserDetailsManager</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> user2<span class="token punctuation">,</span> user3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>.password(&quot;{noop}1234&quot;)</code> : {noop)는 비밀번호 인코딩을 하지 않음을 의미</li><li>yml 설정과 Config 빈 설정이 중복되면 Config 빈 설정이 우선순위가 높다.</li></ul>`,142),g=[b];function h(f,w){return a(),s("div",null,g)}const C=n(y,[["render",h],["__file","section-02.html.vue"]]),x=JSON.parse('{"path":"/book-lecture/spring-security-v6/section-02.html","title":"초기화 과정","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"기본 보안을 위한 자동 설정","slug":"기본-보안을-위한-자동-설정","link":"#기본-보안을-위한-자동-설정","children":[]},{"level":2,"title":"SecurityBuilder, SecurityConfigurer","slug":"securitybuilder-securityconfigurer","link":"#securitybuilder-securityconfigurer","children":[]},{"level":2,"title":"HttpSecurity, WebSecurity","slug":"httpsecurity-websecurity","link":"#httpsecurity-websecurity","children":[{"level":3,"title":"HttpSecurity","slug":"httpsecurity","link":"#httpsecurity","children":[]},{"level":3,"title":"SecurityFilterChain","slug":"securityfilterchain","link":"#securityfilterchain","children":[]},{"level":3,"title":"WebSecurity","slug":"websecurity","link":"#websecurity","children":[]}]},{"level":2,"title":"DelegatingFilterProxy, FilterChainProxy","slug":"delegatingfilterproxy-filterchainproxy","link":"#delegatingfilterproxy-filterchainproxy","children":[{"level":3,"title":"DelegatingFilterProxy","slug":"delegatingfilterproxy","link":"#delegatingfilterproxy","children":[]},{"level":3,"title":"FilterChainProxy","slug":"filterchainproxy","link":"#filterchainproxy","children":[]}]},{"level":2,"title":"사용자 정의 보안 설정","slug":"사용자-정의-보안-설정","link":"#사용자-정의-보안-설정","children":[]}],"git":{"updatedTime":1731751877000,"contributors":[{"name":"depark","email":"mem29238@gmail.com","commits":3}]},"filePathRelative":"book-lecture/spring-security-v6/section-02.md"}');export{C as comp,x as data};
